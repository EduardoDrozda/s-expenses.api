// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model Company {
  id      String @id @default(cuid())
  name    String
  email   String
  phone   String
  address String

  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  User            User[]
  CategoryExpense CategoryExpense[]
  CostCenter      CostCenter[]
  Group           Group[]
  Project         Project[]

  @@map("companies")
}

model User {
  id       String  @id @default(cuid())
  name     String
  email    String  @unique
  phone    String
  isActive Boolean @default(true) @map("is_active")
  role     String  @default("user")
  password String? @map("password")

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])

  createdAt    DateTime @default(now()) @map("created_at")
  createdById  String?  @map("created_by")
  createdBy    User?    @relation("UserCreatedBy", fields: [createdById], references: [id])
  createdUsers User[]   @relation("UserCreatedBy")

  updatedAt    DateTime @updatedAt @map("updated_at")
  updatedById  String?  @map("updated_by")
  updatedBy    User?    @relation("UserUpdatedBy", fields: [updatedById], references: [id])
  updatedUsers User[]   @relation("UserUpdatedBy")

  deletedAt    DateTime? @map("deleted_at")
  deletedById  String?   @map("deleted_by")
  deletedBy    User?     @relation("UserDeletedBy", fields: [deletedById], references: [id])
  deletedUsers User[]    @relation("UserDeletedBy")

  createdRecords     CategoryExpense[] @relation("UserCreatedBy")
  updatedRecords     CategoryExpense[] @relation("UserUpdatedBy")
  deletedRecords     CategoryExpense[] @relation("UserDeletedBy")
  CostCenter         CostCenter[]      @relation("CostCenterCreatedBy")
  updatedCostCenters CostCenter[]      @relation("CostCenterUpdatedBy")
  deletedCostCenters CostCenter[]      @relation("CostCenterDeletedBy")
  Group              Group[]           @relation("GroupCreatedBy")
  updatedGroups      Group[]           @relation("GroupUpdatedBy")
  deletedGroups      Group[]           @relation("GroupDeletedBy")
  Project            Project[]         @relation("ProjectCreatedBy")
  updatedProjects    Project[]         @relation("ProjectUpdatedBy")
  deletedProjects    Project[]         @relation("ProjectDeletedBy")
  Expense            Expense[]         @relation("ExpenseCreatedBy")
  updatedExpenses    Expense[]         @relation("ExpenseUpdatedBy")
  deletedExpenses    Expense[]         @relation("ExpenseDeletedBy")

  @@map("users")
}

model CategoryExpense {
  id          String  @id @default(cuid())
  name        String
  description String?
  icon        String?
  color       String?

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  createdById String? @map("created_by")
  createdBy   User?   @relation("UserCreatedBy", fields: [createdById], references: [id])

  updatedAt   DateTime @updatedAt @map("updated_at")
  updatedById String?  @map("updated_by")
  updatedBy   User?    @relation("UserUpdatedBy", fields: [updatedById], references: [id])

  deletedAt   DateTime? @map("deleted_at")
  deletedById String?   @map("deleted_by")
  deletedBy   User?     @relation("UserDeletedBy", fields: [deletedById], references: [id])
  expenses    Expense[]

  @@map("category_expenses")
}

model CostCenter {
  id          String  @id @default(cuid())
  name        String
  description String?

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])

  createdAt   DateTime @default(now()) @map("created_at")
  createdById String?  @map("created_by")
  createdBy   User?    @relation("CostCenterCreatedBy", fields: [createdById], references: [id])

  updatedAt   DateTime @updatedAt @map("updated_at")
  updatedById String?  @map("updated_by")
  updatedBy   User?    @relation("CostCenterUpdatedBy", fields: [updatedById], references: [id])

  deletedAt   DateTime? @map("deleted_at")
  deletedById String?   @map("deleted_by")
  deletedBy   User?     @relation("CostCenterDeletedBy", fields: [deletedById], references: [id])
  Expense     Expense[]

  @@map("cost_centers")
}

model Group {
  id          String  @id @default(cuid())
  name        String
  description String?

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])

  createdAt   DateTime @default(now()) @map("created_at")
  createdById String?  @map("created_by")
  createdBy   User?    @relation("GroupCreatedBy", fields: [createdById], references: [id])

  updatedAt   DateTime @updatedAt @map("updated_at")
  updatedById String?  @map("updated_by")
  updatedBy   User?    @relation("GroupUpdatedBy", fields: [updatedById], references: [id])

  deletedAt   DateTime? @map("deleted_at")
  deletedById String?   @map("deleted_by")
  deletedBy   User?     @relation("GroupDeletedBy", fields: [deletedById], references: [id])

  Expense Expense[]

  @@map("groups")
}

model Project {
  id          String  @id @default(cuid())
  name        String
  description String?

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])

  createdAt   DateTime @default(now()) @map("created_at")
  createdById String?  @map("created_by")
  createdBy   User?    @relation("ProjectCreatedBy", fields: [createdById], references: [id])

  updatedAt   DateTime @updatedAt @map("updated_at")
  updatedById String?  @map("updated_by")
  updatedBy   User?    @relation("ProjectUpdatedBy", fields: [updatedById], references: [id])

  deletedAt   DateTime? @map("deleted_at")
  deletedById String?   @map("deleted_by")
  deletedBy   User?     @relation("ProjectDeletedBy", fields: [deletedById], references: [id])

  expenses Expense[]

  @@map("projects")
}

model Expense {
  id        String   @id @default(cuid())
  issueDate DateTime @map("issue_date")

  categoryExpenseId String          @map("category_expense_id")
  categoryExpense   CategoryExpense @relation(fields: [categoryExpenseId], references: [id])

  amount Float

  costCenterId String     @map("cost_center_id")
  costCenter   CostCenter @relation(fields: [costCenterId], references: [id])

  groupId String? @map("group_id")
  group   Group?  @relation(fields: [groupId], references: [id])

  projectId String?  @map("project_id")
  project   Project? @relation(fields: [projectId], references: [id])

  createdAt   DateTime @default(now()) @map("created_at")
  createdById String?  @map("created_by")
  createdBy   User?    @relation("ExpenseCreatedBy", fields: [createdById], references: [id])

  updatedAt   DateTime @updatedAt @map("updated_at")
  updatedById String?  @map("updated_by")
  updatedBy   User?    @relation("ExpenseUpdatedBy", fields: [updatedById], references: [id])

  deletedAt   DateTime? @map("deleted_at")
  deletedById String?   @map("deleted_by")
  deletedBy   User?     @relation("ExpenseDeletedBy", fields: [deletedById], references: [id])

  @@map("expenses")
}
